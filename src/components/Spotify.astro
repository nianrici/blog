---

// Authorization token that must have been created previously. See : https://developer.spotify.com/documentation/web-api/concepts/authorization
const token = 'BQCdG5wFKvFj5_F_UgOFo4RYNMLG0888oiWC0Z1AlLfNwlZIxT1Rg7nfup7pBwipX8QZ64VSkvv44agKS0YlPUMRGhZumytEGQN6RjKNpdUlzLWJkJs4sI6j00ad2Xn38tQ2ke38XHadnbieOQRmCUmQANCPwCILVmg9cAE1tkjchUYIfVx32Tt20xycfmxUbocy7x1scEEd-1ECGQ5yCMKN-tNRM5hzKks2KG_PCrMTMgMjU380Q6oRNFZ3vg';
async function fetchWebApi(endpoint, method, body) {
  const res = await fetch(`https://api.spotify.com/${endpoint}`, {
    headers: {
      Authorization: `Bearer ${token}`,
    },
    method,
    body:JSON.stringify(body)
  });
  return await res.json();
}

async function getTopTracks(){
  // Endpoint reference : https://developer.spotify.com/documentation/web-api/reference/get-users-top-artists-and-tracks
  return (await fetchWebApi(
    'v1/me/top/tracks?time_range=long_term&limit=20', 'GET'
  )).items;
}

const topTracks = await getTopTracks();
console.log(
  topTracks?.map(
    ({name, artists}) =>
      `${name} by ${artists.map(artist => artist.name).join(', ')}`
  )
);

// Authorization token that must have been created previously. See : https://developer.spotify.com/documentation/web-api/concepts/authorization
async function fetchWebApi(endpoint, method, body) {
  const res = await fetch(`https://api.spotify.com/${endpoint}`, {
    headers: {
      Authorization: `Bearer ${token}`,
    },
    method,
    body:JSON.stringify(body)
  });
  return await res.json();
}

const topTracksIds = [
  '5ofoB8PFmocBXFBEWVb6Vz','7ssJMybqD4c4dkpoU81mlZ','6gq5YInoFxEUT13bzu9DyC','4hswIIoErwEhIwtuFxN40R','7EUR0M4BLyUAbar1kTFNnq'
];

async function getRecommendations(){
  // Endpoint reference : https://developer.spotify.com/documentation/web-api/reference/get-recommendations
  return (await fetchWebApi(
    `v1/recommendations?limit=20&seed_tracks=${topTracksIds.join(',')}`, 'GET'
  )).tracks;
}

const recommendedTracks = await getRecommendations();
console.log(
  recommendedTracks.map(
    ({name, artists}) =>
      `${name} by ${artists.map(artist => artist.name).join(', ')}`
  )
);

// Authorization token that must have been created previously. See : https://developer.spotify.com/documentation/web-api/concepts/authorization
async function fetchWebApi(endpoint, method, body) {
  const res = await fetch(`https://api.spotify.com/${endpoint}`, {
    headers: {
      Authorization: `Bearer ${token}`,
    },
    method,
    body:JSON.stringify(body)
  });
  return await res.json();
}

const tracksUri = [
  'spotify:track:5ofoB8PFmocBXFBEWVb6Vz','spotify:track:1k12PFCoA3oV80ogPM3XXZ','spotify:track:7ssJMybqD4c4dkpoU81mlZ','spotify:track:4r8FKgONIp72YvzTWrAvFI','spotify:track:6gq5YInoFxEUT13bzu9DyC','spotify:track:5v1MdVFx4wfeo2CPI7fYOS','spotify:track:4hswIIoErwEhIwtuFxN40R','spotify:track:1wO0CTfWTZ9Eq57QFJTHxG','spotify:track:7EUR0M4BLyUAbar1kTFNnq','spotify:track:7tuO9p4tvMLKPOirkJa6S8'
];

async function createPlaylist(tracksUri){
  const { id: user_id } = await fetchWebApi('v1/me', 'GET')

  const playlist = await fetchWebApi(
    `v1/users/${user_id}/playlists`, 'POST', {
      "name": "My recommendation playlist",
      "description": "Playlist created by the tutorial on developer.spotify.com",
      "public": false
  })

  await fetchWebApi(
    `v1/playlists/${playlist.id}/tracks?uris=${tracksUri.join(',')}`,
    'POST'
  );

  return playlist;
}

const createdPlaylist = await createPlaylist(tracksUri);
console.log(createdPlaylist.name, createdPlaylist.id);

const playlistId = '6wCFe9takf6Sqw3MWvAZ6j';

---

<iframe
  title="Spotify Embed: Recommendation Playlist "
  src={`https://open.spotify.com/embed/playlist/6wCFe9takf6Sqw3MWvAZ6j?utm_source=generator&theme=0`}
  width="100%"
  height="100%"
  style={{ minHeight: '360px' }}
  frameBorder="0"
  allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture"
  loading="lazy"
/>
